/*
Given a weighted, undirected and connected graph of V vertices and E edges. The task is to find the sum of weights of the edges of the Minimum Spanning Tree.

 

Example 1:

Input:

Output:
4
Explanation:

The Spanning Tree resulting in a weight
of 4 is shown above.

Example 2:

Input:

Output:
5
Explanation:
Only one Spanning Tree is possible
which has a weight of 5.

 

Your task:
Since this is a functional problem you don't have to worry about input, you just have to complete the function  spanningTree() which takes number of vertices V and an adjacency matrix adj as input parameters and returns an integer denoting the sum of weights of the edges of the Minimum Spanning Tree. Here adj[i] contains a list of lists containing two integers where the first integer a[i][0] denotes that there is an edge between i and a[i][0] and second integer a[i][1] denotes that the distance between edge i and a[i][0] is a[i][1].

Expected Time Complexity: O(ElogV).
Expected Auxiliary Space: O(V2).
 

Constraints:
2 ≤ V ≤ 1000
V-1 ≤ E ≤ (V*(V-1))/2
1 ≤ w ≤ 1000
Graph is connected and doesn't contain self loops & multiple edges.
*/
#include<bits/stdc++.h>
using namespace std;
class Solution {
	public:
    int spanningTree(int V, vector<vector<int>> adj[]) {
        vector<bool> visited(V, false);
        vector<int> cost(V, INT_MAX);
        typedef pair<int, int> pii;
        set<pii> S;
        for (auto& e : adj[0]) {
            S.insert({e[1], e[0]});
            cost[e[0]] = e[1];
        }
        for (int i = 0; i < V; i++)
            if (cost[i] == INT_MAX) S.insert({INT_MAX, i});
        visited[0] = true; int ans = 0;
        while (!S.empty()) {
            pii e = *S.begin(); S.erase(S.begin());
            if (visited[e.second]) continue;
            visited[e.second] = true; ans += e.first;
            for (auto &e_ : adj[e.second]) {
                if (visited[e_[0]] || e_[1] >= cost[e_[0]]) continue;
                S.erase(S.find({cost[e_[0]], e_[0]}));
                S.insert({e_[1], e_[0]});
                cost[e_[0]] = e_[1];
            }
            }
        return ans;
    }
};

// { Driver Code Starts.


int main()
{
    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;
        vector<vector<int>> adj[V];
        int i=0;
        while (i++<E) {
            int u, v, w;
            cin >> u >> v >> w;
            vector<int> t1,t2;
            t1.push_back(v);
            t1.push_back(w);
            adj[u].push_back(t1);
            t2.push_back(u);
            t2.push_back(w);
            adj[v].push_back(t2);
        }
        
        Solution obj;
    	cout << obj.spanningTree(V, adj) << "\n";
    }

    return 0;
}
